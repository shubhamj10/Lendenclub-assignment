'use strict';

var path = require('path'),
    fs = require('fs'),
    wash = require('wash');

var argv = require('yargs')
    .usage('Usage: $0 [targetPath] [options]')
    .option('v', { alias : 'node-version', demand: false, 'default': 'latest', describe: 'Node version', type: 'string' })
    .option('m', { alias : 'maintainer', demand: false, 'default': '', describe: 'Maintainer information', type: 'string' })
    .help('h').alias('h', 'help')
    .example('$0', 'Generate "Dockerfile" based on "./package.json"')
    .example('$0 .', 'Generate "Dockerfile" based on "./package.json"')
    .example('$0 ./package.json', 'Generate "Dockerfile" based on "./package.json"')
    .example('$0 path/to/app', 'Generate "Dockerfile" based on "./path/to/app/package.json"')
    .argv;

var targetPath = path.resolve(argv._[0] || '.');
console.assert(fs.existsSync(targetPath), 'Path not found: ' + targetPath);
if(fs.lstatSync(targetPath).isDirectory()) {
    targetPath = path.join(targetPath, 'package.json');
    console.assert(fs.existsSync(targetPath), 'File not found: ' + targetPath);
} else {
    console.assert(path.basename(targetPath) === 'package.json', 'Need "package.json" file path.');
}

var targetPackageData = require(targetPath);
var dockerfileTemplate = fs.readFileSync(path.join(__dirname, 'resources', 'Dockerfile.template'), { encoding: 'utf8' });

console.log(wash.render(dockerfileTemplate, {
    nodeTag: argv.nodeVersion,
    maintainer: argv.maintainer,
    npmStart: targetPackageData.scripts.start,
    mainScript: targetPackageData.main
}));
